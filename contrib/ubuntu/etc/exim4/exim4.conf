### EXIM
### Mysql flags description:
#00000001 (flags&1) - mailbox enabled
#00000010 (flags&2) - remote access enabled
#00000100 (flags&4) - HELO checks disabled
#00001000 (flags&8) - spamd checks disabled

MAIN_QUALIFY_DOMAIN=fakedomain.tld
MAIN_PRIMARY_HOSTNAME=mx0.fakedomain.tld
MAIN_PRIMARY_HOSTNAME_INTERFACE=1.1.1.1

MM_HOME=/usr/local/mailman
MM_UID=mail
MM_GID=mail
MM_WRAP=MM_HOME/mail/mailman
MM_LISTCHK=MM_HOME/lists/${lc::$local_part}/config.pck
domainlist mm_domains=MAIN_QUALIFY_DOMAIN


USERHOME=/var/vmail

primary_hostname = MAIN_PRIMARY_HOSTNAME
smtp_banner="Welcome to SMTP!"
add_environment = <; PATH=/bin:/usr/bin

daemon_smtp_ports = 25:465
tls_on_connect_ports = 465
tls_advertise_hosts = *
tls_certificate = /etc/exim4/exim.crt
tls_privatekey = /etc/exim4/exim.key
#tls_verify_certificates = ${if exists{/etc/ssl/certs/ca-certificates.crt}\
#                          {/etc/ssl/certs/ca-certificates.crt}\
#                          {/dev/null}}

# The gecos field in /etc/passwd holds not only the name. see passwd(5).
gecos_pattern = ^([^,:]*)
gecos_name = $1

local_from_check = false
local_sender_retain = true
untrusted_set_sender = *

ignore_bounce_errors_after = 2d

timeout_frozen_after = 7d

freeze_tell = postmaster

smtp_receive_timeout = 5m
smtp_accept_max = 350
smtp_accept_max_per_connection = 50
smtp_accept_max_per_host = 25
smtp_max_unknown_commands = 3

#remote_max_parallels = 25
split_spool_directory = true
smtp_enforce_sync = true

hide mysql_servers = localhost/maildb/mail/1234567890

domainlist local_domains = ${lookup mysql{SELECT domain FROM admindb_domains WHERE domain='${domain}' \
AND (type='LOCAL' OR type='VIRTUAL')}} : @mx_primary : @[MAIN_PRIMARY_HOSTNAME_INTERFACE]
domainlist relay_to_domains = ${lookup mysql{SELECT domain FROM admindb_domains WHERE domain='${domain}' AND type='RELAY'}}

hostlist relay_from_hosts = <; 127.0.0.1 ; ::1 ; 10.0.0.0/8 ; 172.16.0.0/12 ; 192.168.0.0/16

host_lookup = *

# Enable an efficiency feature.  We advertise the feature; clients
# may request to use it.  For multi-recipient mails we then can
# reject or accept per-user after the message is received.
#
prdr_enable = true

auth_advertise_hosts = *

hostlist helo_accept_junk_hosts = *
#192.6.76.85 : 213.130.10.2 : 62.221.44.212 : 217.199.228.226 : 193.201.61.146 : 80.254.0.8

acl_smtp_mail = acl_check_mail
acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data
acl_smtp_auth = acl_check_auth

av_scanner = clamd:/var/run/clamav/clamd.ctl
#local_scan_path = /usr/lib/exim4/local_scan/sa-exim.so
#spamd_address = /var/run/spamd_socket
spamd_address = 127.0.0.1 783
#system_filter = /usr/local/etc/exim/filter
sender_unqualified_hosts =
qualify_domain = MAIN_QUALIFY_DOMAIN

exim_user = mail
exim_group = mail

never_users =

host_lookup = !192.168.0.0/16 : !10.0.0.0/8

rfc1413_hosts = *
rfc1413_query_timeout = 5s

message_size_limit = 500M

helo_try_verify_hosts = *

## uncomment this for debugging
## +all -subject -arguments
#
#log_selector = +smtp_protocol_error +smtp_syntax_error +tls_certificate_verified +tls_peerdn

### ACL CONFIGURATION

begin acl

acl_local_deny_exceptions:
	accept
		hosts = ${if exists{/etc/exim4/host_local_deny_exceptions}\
            	    {/etc/exim4/host_local_deny_exceptions}\
            	    {}}
	accept
		senders = ${if exists{/etc/exim4/sender_local_deny_exceptions}\
            	    {/etc/exim4/sender_local_deny_exceptions}\
            	    {}}
	accept
		hosts = ${if exists{/etc/exim4/local_host_whitelist}\
            	    {/etc/exim4/local_host_whitelist}\
            	    {}}
	accept
		senders = ${if exists{/etc/exim4/local_sender_whitelist}\
            	    {/etc/exim4/local_sender_whitelist}\
            	    {}}

acl_check_mail:
.ifdef CHECK_MAIL_HELO_ISSUED
	deny
		message = no HELO given before MAIL command
		condition = ${if def:sender_helo_name {no}{yes}}
.endif

  accept

acl_check_rcpt:
	# Accept if the source is local SMTP (i.e. not over TCP/IP). We do this by
	# testing for an empty sending host field.
	accept
		hosts = :
		control = dkim_disable_verify
    
	deny
		domains = +local_domains
		local_parts = ^[.] : ^.*[@%!/|`#&?]
		message = restricted characters in address

	deny
		domains = !+local_domains
		local_parts = ^[./|] : ^.*[@%!`#&?] : ^.*/\\.\\./
		message = restricted characters in address

	accept
		local_parts = postmaster
		domains = +local_domains : +relay_to_domains
    
        deny    local_parts = spam : reports
                domains = $qualify_domain
                ! hosts = +relay_from_hosts
	deny
		message = Sender verification failed
		!acl = acl_local_deny_exceptions
		!verify = sender
	deny
		!acl = acl_local_deny_exceptions
		senders = 	${if exists{/etc/exim4/local_sender_callout}\
			    {/etc/exim4/local_sender_callout}\
			    {}}
		!verify = sender/callout
	# Verify recipients listed in local_rcpt_callout with a callout.
	# This is especially handy for forwarding MX hosts (secondary MX or
	# mail hubs) of domains that receive a lot of spam to non-existent
	# addresses.  The only way to check local parts for remote relay
	# domains is to use a callout (add /callout), but please read the
	# documentation about callouts before doing this.
        deny
                !acl = acl_local_deny_exceptions
                recipients = ${if exists{/etc/exim4/local_rcpt_callout}\
                        {/etc/exim4/local_rcpt_callout}\
                        {}}
                !verify = recipient/callout

	# /etc/exim4/local_sender_blacklist holds a list of envelope senders that
	# should have their access denied to the local host. Incoming messages
	# with one of these senders are rejected at RCPT time.
	#
	# The explicit white lists are honored as well as negative items in
	# the black list. See exim4-config_files(5) for details.
	deny
		message = sender envelope address $sender_address is locally blacklisted here. If you think this is wrong, get in touch with postmaster
		!acl = acl_local_deny_exceptions
		senders = ${if exists{/etc/exim4/local_sender_blacklist}\
            	    {/etc/exim4/local_sender_blacklist}\
            	    {}}

	# deny bad sites (IP address)
	# /etc/exim4/local_host_blacklist holds a list of host names, IP addresses
	# and networks (CIDR notation)  that should have their access denied to
	# The local host. Messages coming in from a listed host will have all
	# RCPT statements rejected.
	#
	# The explicit white lists are honored as well as negative items in
	# the black list. See exim4-config_files(5) for details.
	deny
		message = sender IP address $sender_host_address is locally blacklisted here. If you think this is wrong, get in touch with postmaster
		!acl = acl_local_deny_exceptions
		hosts = ${if exists{/etc/exim4/local_host_blacklist}\
            	    {/etc/exim4/local_host_blacklist}\
            	    {}}

	# Warn if the sender host does not have valid reverse DNS.
	#
	# If your system can do DNS lookups without delay or cost, you might want
	# to enable this.
	# If sender_host_address is defined, it's a remote call.  If
	# sender_host_name is not defined, then reverse lookup failed.  Use
	# this instead of !verify = reverse_host_lookup to catch deferrals
	# as well as outright failures.
	warn
		condition = ${if and{{def:sender_host_address}{!def:sender_host_name}}\
            	    {yes}{no}}
		add_header = X-Host-Lookup-Failed: Reverse DNS lookup failed for $sender_host_address (${if eq{$host_lookup_failed}{1}{failed}{deferred}})


	# Use spfquery to perform a pair of SPF checks (for details, see
	# http://www.openspf.org/)
	#
	# This is quite costly in terms of DNS lookups (~6 lookups per mail).  Do not
	# enable if that's an issue.  Also note that if you enable this, you must
	# install "spf-tools-perl" which provides the spfquery command.
	# Missing spf-tools-perl will trigger the "Unexpected error in
	# SPF check" warning.
.ifdef CHECK_RCPT_SPF
	deny
		message = [SPF] $sender_host_address is not allowed to send mail from \
    		    ${if def:sender_address_domain {$sender_address_domain}{$sender_helo_name}}.  \
    		    Please see \
    		    http://www.openspf.org/Why?scope=${if def:sender_address_domain \
    		    {mfrom}{helo}};identity=${if def:sender_address_domain \
    		    {$sender_address}{$sender_helo_name}};ip=$sender_host_address
		log_message = SPF check failed.
		!acl = acl_local_deny_exceptions
		condition = ${run{/usr/bin/spfquery.mail-spf-perl --ip \
            	    ${quote:$sender_host_address} --identity \
            	    ${if def:sender_address_domain \
                	    {--scope mfrom  --identity ${quote:$sender_address}}\
                	    {--scope helo --identity ${quote:$sender_helo_name}}}}\
            	    {no}{${if eq {$runrc}{1}{yes}{no}}}}

	defer
		message = Temporary DNS error while checking SPF record.  Try again later.
		!acl = acl_local_deny_exceptions
		condition = ${if eq {$runrc}{5}{yes}{no}}

	warn
		condition = ${if <={$runrc}{6}{yes}{no}}
		add_header = Received-SPF: ${if eq {$runrc}{0}{pass}\
                              {${if eq {$runrc}{2}{softfail}\
                               {${if eq {$runrc}{3}{neutral}\
                                {${if eq {$runrc}{4}{permerror}\
                                 {${if eq {$runrc}{6}{none}{error}}}}}}}}}\
                              } client-ip=$sender_host_address; \
                              ${if def:sender_address_domain \
                                 {envelope-from=${sender_address}; }{}}\
                              helo=$sender_helo_name

	warn
		log_message = Unexpected error in SPF check.
		condition = ${if >{$runrc}{6}{yes}{no}}
.endif


	# Check against classic DNS "black" lists (DNSBLs) which list
	# sender IP addresses
.ifdef CHECK_RCPT_IP_DNSBLS
	warn
		dnslists = CHECK_RCPT_IP_DNSBLS
		add_header = X-Warning: $sender_host_address is listed at $dnslist_domain ($dnslist_value: $dnslist_text)
		log_message = $sender_host_address is listed at $dnslist_domain ($dnslist_value: $dnslist_text)
.endif


	# Check against DNSBLs which list sender domains, with an option to locally
	# whitelist certain domains that might be blacklisted.
	#
	# Note: If you define CHECK_RCPT_DOMAIN_DNSBLS, you must append
	# "/$sender_address_domain" after each domain.  For example:
	# CHECK_RCPT_DOMAIN_DNSBLS = rhsbl.foo.org/$sender_address_domain \
	#                            : rhsbl.bar.org/$sender_address_domain
.ifdef CHECK_RCPT_DOMAIN_DNSBLS
	warn
		!senders = ${if exists{/etc/exim4/local_domain_dnsbl_whitelist}\
            	    {/etc/exim4/local_domain_dnsbl_whitelist}\
            	    {}}
		dnslists = CHECK_RCPT_DOMAIN_DNSBLS
		add_header = X-Warning: $sender_address_domain is listed at $dnslist_domain ($dnslist_value: $dnslist_text)
		log_message = $sender_address_domain is listed at $dnslist_domain ($dnslist_value: $dnslist_text)
.endif

        accept  condition = ${if eq{} {${lookup mysql{SELECT concat('USERHOME','/',domain_id,'/',localpart) as home /
			    FROM admindb_users WHERE localpart='${local_part}' AND domain_id='${domain}' AND enabled AND remote_access}}}{no}{yes}}

        warn    set acl_c0 =
                set acl_c0 = ${lookup dnsdb{a=$sender_helo_name}{$value}}

        drop    message = Forged hostname detected in HELO/EHLO (it's mine) - $sender_helo_name
                hosts = !+relay_from_hosts
                log_message = Inadmissible HELO/EHLO! Host "$sender_host_name" used my hostname "$sender_helo_name" as HELO/EHLO!
                condition = ${if eq{$acl_c0}{$interface_address} {yes}{no}}

	# We also require all accepted addresses to be verifiable. This check will
	# do local part verification for local domains, but only check the domain
	# for remote domains.
	require
		verify = recipient
                message = Unknown user

	accept
		hosts = +relay_from_hosts
                endpass
		control = submission/sender_retain
		control = dkim_disable_verify

	# Accept if the message arrived over an authenticated connection, from
	# any host. Again, these messages are usually from MUAs, so recipient
	# verification is omitted, and submission mode is set. And again, we do this
	# check before any black list tests.
	accept
		authenticated = *
                endpass
		control = submission/sender_retain
		control = dkim_disable_verify
		
        warn    message = Inadmissible HELO/EHLO - $sender_helo_name! Correct your HELO/EHLO string!
                log_message = Inadmissible HELO/EHLO! Host "$sender_helo_name" didn't pass helo_try_verify_hosts check!
                ! verify = helo
                ! hosts = +helo_accept_junk_hosts
                ! condition = ${if match{$sender_host_name}{hotmail\.com|mail\.ru}{yes}{no}}
                delay = 30s

        warn    message = Sender address $sender_address does not exist! Correct sender name!
                ! verify = sender/callout
                log_message = Sender address does not exist - $sender_address!
                delay = 30s

        drop    message = Inadmissible host name - $sender_host_name, try to use your ISP MTA!
                hosts = !+relay_from_hosts
                log_message = Inadmissible host name! "$sender_host_name" tried to relay!
                condition = ${if match{$sender_host_name}{dialin|ppp|dialup|dsl|catv|pool|peer|dhcp|dynamic}{yes}{no}}

        drop    message = Inadmissible HELO/EHLO - $sender_helo_name. You gave me an IP, I want your name!
                hosts = !+relay_from_hosts
                log_message = Inadmissible HELO/EHLO! MTA gave me an IP "$sender_helo_name" in HELO/EHLO.
                condition    = ${if isip {$sender_helo_name}{yes}{no}}

        accept  condition = ${if eq{$acl_c1}{$interface_address} {yes}{no}}
                endpass

        accept  domains = +local_domains : +relay_to_domains
                endpass

        deny message = Sorry, relay not permitted

acl_check_auth:
        accept  hosts = +relay_from_hosts
#       accept hosts = *
        accept encrypted = *
        accept condition = ${if eq{${uc:$smtp_command_argument}}{CRAM-MD5}{yes}{no}}
        deny message = Encrytped connection or CRAM-MD5 for smtp authentication is mandatory! Please enable TLS/SSL support in your mailclient in order to relay to this host.

acl_check_data:
        deny    message   = This message contains a virus ($malware_name).
                hosts     = +relay_from_hosts
                condition = ${if < {$message_size}{10M}}
                malware   = *
        accept  hosts = +relay_from_hosts
        accept  authenticated = *
        warn    condition = ${if < {$message_size}{10M}}
                spam = nobody
                add_header = Subject: ***SPAM (score:$spam_score)*** $h_Subject:
        warn    message = X-MIME-Error: $demime_reason
              demime = *
              condition = ${if >{$demime_errorlevel}{0}{1}{0}}
              set acl_m_greylistreasons = Message has MIME error: $demime_reason\n$acl_m_greylistreasons
        warn  condition = ${if and {                                  \
                              {match {${lc:$h_subject:}}{^re:}}       \
                              {!def:h_References:}                    \
                              {!def:h_In-Reply-To:}                   \
                           } {1}{0}}
              message = X-Bad-Reply: 'Re:' in Subject but no References or In-Reply-To headers
              set acl_m_greylistreasons = Message has 'Re:' in Subject: but neither References: nor In-Reply-To:\n$acl_m_greylistreasons
        warn condition = ${if !def:h_Message-ID: {1}}
              set acl_m_greylistreasons = Message has no Message-Id: header\n$acl_m_greylistreasons
        warn condition = ${if >{$spam_score_int}{0} {1}}
             set acl_m_greylistreasons = Message has $spam_score SpamAssassin points\n$acl_m_greylistreasons
        warn dnslists = psbl.surriel.org
             set acl_m_greylistreasons = Host listed in $dnslist_domain blacklist: $dnslist_text\n$acl_m_greylistreasons
        warn !condition = $mime_is_rfc822
              condition = $mime_is_coverletter
              condition = ${if eq{$mime_content_type}{text/html} {1}}
              set acl_m_greylistreasons = Message appears to have HTML content, not just plain text.\n$acl_m_greylistreasons
        warn set acl_m_greylistreasons = Sender is new to me\n$acl_m_greylistreasons
#       warn  senders = boss@bigcorp.com
#             set acl_m_greylistreasons =
#
#       warn dnslists = list.dnswl.org
#            set acl_m_greylistreasons =
        deny    message   = This message contains a virus ($malware_name).
                condition = ${if < {$message_size}{10M}}
                malware   = *
        require acl = greylist_mail
        accept
.include /etc/exim4/acl-greylist-sqlite

### ROUTERS CONFIGURATION

begin routers


dnslookup:
        driver = dnslookup
        domains = !+local_domains
#       condition = ${if eq{lookup dnsdb{a=$domain}{'193.254.232.1'}}{no}{yes}}
        transport = remote_smtp
        ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
        no_more

forwards:
        driver = redirect
        domains = +local_domains
        allow_fail
        allow_defer
        data = ${lookup mysql{select group_concat(concat(if(recipient_localpart='','${local_part}',\
        recipient_localpart),'@',recipient_domain)) from admindb_forwards where if(localpart='','${local_part}',\
        localpart)='${local_part}' and if(domain='','${domain}',domain)='${domain}' group by \
        priority order by priority limit 1}}

system_aliases:
        driver = redirect
        domains = +local_domains
        allow_fail
        allow_defer
        data = ${lookup mysql{SELECT recipients FROM admindb_aliases WHERE localpart='${local_part}' AND \
        domain_id='${domain}'}}

virtualuser:
        driver = accept
        domains = +local_domains
        condition = ${if eq{} {${lookup mysql{SELECT concat('USERHOME','/',domain_id,'/',localpart) as home \
        FROM admindb_users WHERE localpart='${local_part}' AND domain_id='${domain}' AND enabled}}}{no}{yes}}
#       transport = local_vmail
        transport = dovecot_lda

mailman_router:
        driver = accept
        domains = +local_domains
        require_files = MM_LISTCHK
        local_part_suffix_optional
        local_part_suffix = -admin : -bounces : -bounces+* : -confirm : -confirm+* : -join : -leave : \
        -owner : -request : -subscribe : -unsubscribe
        transport = mailman_transport

### TRANSPORTS CONFIGURATION

begin transports

# This transport is used for delivering messages over SMTP connections.

remote_smtp:
  driver = smtp
  interface = 1.1.1.1

# This transport is used for local delivery to user mailboxes in traditional
# BSD mailbox format. By default it will be run under the uid and gid of the
# local user, and requires the sticky bit to be set on the /var/mail directory.
# Some systems use the alternative approach of running mail deliveries under a
# particular group instead of using the sticky bit. The commented options below
# show how this can be done.

local_delivery:
  driver = appendfile
  file = /var/mail/$local_part
  delivery_date_add
  envelope_to_add
  return_path_add
  group = mail
  user = $local_part
  mode = 0660
  no_mode_fail_narrower

# This transport is used for handling pipe deliveries generated by alias or
# .forward files. If the pipe generates any standard output, it is returned
# to the sender of the message as a delivery error. Set return_fail_output
# instead of return_output if you want this to happen only when the pipe fails
# to complete normally. You can set different transports for aliases and
# forwards if you want to - see the references to address_pipe in the routers
# section above.

address_pipe:
  driver = pipe
  return_output

# This transport is used for handling deliveries directly to files that are
# generated by aliasing or forwarding.

address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add


# This transport is used for handling autoreplies generated by the filtering
# option of the userforward router.

address_reply:
  driver = autoreply

dovecot_lda:
        driver          = pipe
        command         = /usr/lib/dovecot/deliver -d $local_part@$domain
        group = mail
        user = mail
        message_prefix = ""
        message_suffix = ""
        return_path_add
        delivery_date_add
        envelope_to_add
        log_output

local_vmail:
        driver = appendfile
        check_string = ""
        create_directory
        delivery_date_add
        directory = ${lookup mysql{SELECT concat('USERHOME','/',domain_id,'/',localpart) as home \
        FROM admindb_users WHERE localpart='${local_part}' AND domain_id='${domain}' AND enabled}}
        directory_mode = 770
        envelope_to_add
        group = mail
        maildir_format
        maildir_tag = ,S=$message_size
        message_prefix = ""
        message_suffix = ""
        mode = 0600
        quota = ${lookup mysql{SELECT quota FROM admindb_users WHERE localpart='${local_part}' AND domain_id='${domain}'}{${value}M}}
        quota_size_regex = S=(\d+)$
        quota_warn_threshold = 95%
        return_path_add

spam:
        driver = appendfile
        check_string = ""
        create_directory
        delivery_date_add
        directory = /var/vmail/$qualify_domain/spam
        directory_mode = 770
        envelope_to_add
        group = mail
        maildir_format
        maildir_tag = ,S=$message_size
        message_prefix = ""
        message_suffix = ""
        mode = 0600
        return_path_add

mailman_transport:
        driver = pipe
        command = MM_WRAP \
                '${if def:local_part_suffix {${sg{$local_part_suffix}{-(\\w+)(\\+.*)?}{\$1}}} \
                {post}}' $local_part
        current_directory = MM_HOME
        home_directory = MM_HOME
        user = MM_UID
        group = MM_GID

### RETRY CONFIGURATION

begin retry

# This single retry rule applies to all domains and all errors. It specifies
# retries every 15 minutes for 2 hours, then increasing retry intervals,
# starting at 1 hour and increasing each time by a factor of 1.5, up to 16
# hours, then retries every 6 hours until 4 days have passed since the first
# failed delivery.

# Address or Domain    Error       Retries
# -----------------    -----       -------
# *                     quota_3d        F,1s,1s
*                       quota           F,1m,1m
*                       *               F,2h,15m; G,16h,1h,1.5; F,4d,6h


### REWRITE CONFIGURATION

begin rewrite


### AUTHENTICATION CONFIGURATION

begin authenticators

#select encrypt('123456789', (SELECT password FROM users where login='localpart@fakedomain.tld')) as hash;
#crypteq

#auth_plain:
#       driver = plaintext
#       public_name = PLAIN
#       server_condition = ${lookup mysql{SELECT localpart FROM admindb_users \
#       WHERE localpart = '${quote_mysql:${local_part:$auth2}}' AND \
#       domain_id = if('${quote_mysql:${domain:$auth2}}'='','$qualify_domain','${quote_mysql:${domain:$auth2}}') \
#       AND passwd = encrypt('${quote_mysql:$auth3}', (SELECT passwd FROM admindb_users WHERE \
#        localpart = '${quote_mysql:${local_part:$auth2}}' AND domain_id = \
#        if('${quote_mysql:${domain:$auth2}}'='','$qualify_domain','${quote_mysql:${domain:$auth2}}'))) \
#        AND enabled AND remote_access}{yes}{no}}
#       server_prompts = :
##      server_advertise_condition = ${if eq{$tls_cipher}{}{no}{yes}}
#       server_set_id = $auth2
#
#auth_login:
#       driver = plaintext
#       public_name = LOGIN
#       server_condition = ${lookup mysql{SELECT localpart FROM admindb_users WHERE localpart = \
#       '${quote_mysql:${local_part:$auth1}}' AND domain_id = \
#       if('${quote_mysql:${domain:$auth1}}'='','$qualify_domain','${quote_mysql:${domain:$auth1}}') AND \
#       passwd = '${quote_mysql:$auth2}' AND enabled AND remote_access}{yes}{no}}
#       server_prompts = Username:: : Password::
#       server_advertise_condition = ${if eq{$tls_cipher}{}{no}{yes}}
#       server_set_id = $auth1
#
#auth_cram_md5:
#       driver = cram_md5
#       public_name = CRAM-MD5
#       server_secret = ${lookup mysql{SELECT passwd FROM admindb_users WHERE localpart = \
#       '${quote_mysql:${local_part:$auth1}}' AND domain_id = if('${quote_mysql:${domain:$auth1}}'='',\
#       '$qualify_domain','${quote_mysql:${domain:$auth1}}') AND enabled AND remote_access}{$value}fail}
#       server_set_id = $auth1
#
#spa:
#       driver = spa
#       public_name = NTLM
#       server_password = ${lookup mysql{SELECT passwd FROM admindb_users WHERE localpart = \
#       '${quote_mysql:${local_part:$auth1}}' AND domain_id = if('${quote_mysql:${domain:$auth1}}'='',\
#       '$qualify_domain','${quote_mysql:${domain:$auth1}}') AND enabled AND remote_access}{$value}fail}
#       server_set_id = $auth1
auth_plain:
        driver = dovecot
        server_condition = ${lookup mysql{SELECT localpart FROM admindb_users WHERE localpart = \
        '${quote_mysql:${local_part:$auth1}}' AND domain_id = \
        if('${quote_mysql:${domain:$auth1}}'='','$qualify_domain','${quote_mysql:${domain:$auth1}}') \
        AND enabled AND remote_access}{yes}{no}}
        public_name = PLAIN
        server_socket = /var/run/dovecot/auth-client
        server_set_id = $auth1

auth_login:
        driver = dovecot
        public_name = LOGIN
        server_condition = ${lookup mysql{SELECT localpart FROM admindb_users WHERE localpart = \
        '${quote_mysql:${local_part:$auth1}}' AND domain_id = \
        if('${quote_mysql:${domain:$auth1}}'='','$qualify_domain','${quote_mysql:${domain:$auth1}}') AND \
        enabled AND remote_access}{yes}{no}}
        server_socket = /var/run/dovecot/auth-client
        server_set_id = $auth1

auth_cram_md5:
        driver = dovecot
        public_name = CRAM-MD5
        server_condition = ${lookup mysql{SELECT localpart FROM admindb_users WHERE localpart = \
        '${quote_mysql:${local_part:$auth1}}' AND domain_id = \
        if('${quote_mysql:${domain:$auth1}}'='','$qualify_domain','${quote_mysql:${domain:$auth1}}') AND \
        enabled AND remote_access}{yes}{no}}
        server_socket = /var/run/dovecot/auth-client
        server_set_id = $auth1
